generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------
// NextAuth Models
// --------------------
model Account {
  id                 String   @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  age           Int?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  favorites     FavoriteMovie[]
  comments      Comment[]
  savedMovies   Saved[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// --------------------
// App-specific Models
// --------------------
model FavoriteMovie {
  fav_id       String   @id @default(cuid())
  user_id      String
  movie_id     Int
  movie_name   String
  movie_poster String
  observations String?
  created_at   DateTime @default(now())
  user         User     @relation(fields: [user_id], references: [id])
}

model Comment {
  comment_id  String   @id @default(cuid())
  user_id     String
  movie_name  String
  content     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id])
}

model Saved {
  saved_id     String   @id @default(cuid())
  user_id      String
  movie_id     Int
  movie_name   String
  movie_poster String
  created_at   DateTime @default(now())
  user         User     @relation(fields: [user_id], references: [id])
}
